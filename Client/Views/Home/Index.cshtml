@model List<World>
@{
	ViewData["Title"] = "Main Page";
}

<p>@ViewData["Message"]</p>
<div class="row">
	<div class="col s12">
		<h3>Worlds</h3>
	</div>
</div>

<div id="world-container">
	<a class="btn" asp-action="ImportWorlds"><i class="material-icons">terrain</i>Import Worlds</a>
	<ul class="collection">
		@foreach (var world in Model)
		{
			string id = "table_" + world.DirNameNoSpace;
			<li class="drag-drop-container-@Processing.WorldNameJSEncode(world.DirNameNoSpace) collection-item avatar">
				<img src="file://@world.IconPath" alt="" class="circle">
				<span class="title">@Html.Raw(Processing.GetColorCodeHTML(world.Name))</span>
				<p>
					Version: @world.Version <br />
				</p>
				<div id="@id" class="hidden">
					<a class="btn" asp-action="AddDatapack" asp-route-id="@world.Name"><i class="material-icons">add_box</i>Add Datapack</a>
					@if (world.Datapacks.Count > 0)
					{
						<table>
							<thead>
								<tr>
									<th>Name</th>
									<th>Enabled</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var datapack in world.Datapacks)
								{
									string s = datapack.Enabled ? "<span class=\"text-green\">Enabled</span>" : "<span class=\"text-red\">Disabled</span>";
									<tr>
										<td>@datapack.Name</td>
										<td>@Html.Raw(s)</td>
									</tr>
								}
							</tbody>
						</table>
					}
					else
					{
						<p>No Datapacks</p>
					}
				</div>
				<p>
				</p>
				<a asp-action="MoveToTop" asp-route-id="@world.Name"><i class="material-icons">star</i> Move To Top</a>
				<a onclick="toggleO('@id');" href="#/" class="secondary-content"><i class="material-icons">subdirectory_arrow_right</i></a>
			</li>
		}
	</ul>
</div>
@section Scripts
{
	<script>
		// Custom file drop extension
		$.fn.extend({
			filedrop: function (options) {
				var defaults = {
					callback: null
				}
				options = $.extend(defaults, options)
				return this.each(function () {
					var files = []
					var $this = $(this)

					// Stop default browser actions
					$this.bind('dragover dragleave', function (event) {
						event.stopPropagation()
						event.preventDefault()
					})

					// Catch drop event
					$this.bind('drop', function (event) {
						// Stop default browser actions
						event.stopPropagation()
						event.preventDefault()

						// Get all files that are dropped
						files = event.originalEvent.target.files || event.originalEvent.dataTransfer.files

						// Convert uploaded file to data URL and pass trought callback
						if (options.callback) {
							options.callback(files[0].path)
						}
						return false
					})
				})
			}
		})
	</script>

	<script>
		const { ipcRenderer } = require("electron");
		const fs = require('fs');
		var model = @Html.Raw(Json.Serialize(Model));

		$(document).ready(function () {
			@{
				string script1 = "";
			}
			@foreach (var world in Model)
			{
				script1 += $"$(\".drag-drop-container-{Processing.WorldNameJSEncode(world.DirNameNoSpace)}\").filedrop({{callback:function(a){{console.log(a); window.location.href = \"/Home/AddDatapackDirect/{WebUtility.UrlEncode(world.Name)}?Path=\"+a;}}}});" + Environment.NewLine;
			}
			@Html.Raw(script1)
			});
	</script>
}